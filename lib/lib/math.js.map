{"version":3,"sources":["../../src/lib/math.js"],"names":["getPoint","j","d","c","e","x","width","y","height","l","isNaN","k","h","f","g","i","Math","abs","position","calculateLinkPoint","sourceNode","targetNode","config","offset","endNodeInfo","startNodeInfo","sourceShapeType","nodeTemplate","type","shape","targetShapeType","startPoint","endPoint"],"mappings":"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","file":"math.js","sourcesContent":["export default {\n    // 获取节点间的位置信息\n    getPoint(j, d) {\n        let c = d,\n            e = {\n                x: j.x + j.width / 2,\n                y: j.y + j.height / 2\n            };\n        let l = (e.y - c.y) / (e.x - c.x);\n        l = isNaN(l) ?\n            0 :\n            l;\n        let k = j.height / j.width;\n        let h = c.y < e.y ?\n            -1 :\n            1,\n            f = c.x < e.x ?\n                -1 :\n                1,\n            g,\n            i;\n        if (Math.abs(l) > k && h === -1) {\n            g = e.y - j.height / 2;\n            i = e.x + h * j.height / 2 / l;\n        } else {\n            if (Math.abs(l) > k && h === 1) {\n                g = e.y + j.height / 2;\n                i = e.x + h * j.height / 2 / l;\n            } else {\n                if (Math.abs(l) < k && f === -1) {\n                    g = e.y + f * j.width / 2 * l;\n                    i = e.x - j.width / 2;\n                } else {\n                    if (Math.abs(l) < k && f === 1) {\n                        g = e.y + j.width / 2 * l;\n                        i = e.x + j.width / 2;\n                    }\n                }\n            }\n        }\n        let position = {\n            x: i,\n            y: g\n        };\n        return position;\n    },\n\n    // 计算两个节点之间线条的坐标信息\n    calculateLinkPoint(sourceNode, targetNode, config) {\n        let offset = 10;\n        let endNodeInfo = {};\n        let startNodeInfo = {};\n        let sourceShapeType = config.nodeTemplate[sourceNode.type].shape;\n        let targetShapeType = config.nodeTemplate[targetNode.type].shape;\n\n        if (sourceShapeType === 'circle') {\n            startNodeInfo = {\n                x: (sourceNode.x - sourceNode.width) - offset / 2,\n                y: (sourceNode.y - sourceNode.height) - offset / 2,\n                width: sourceNode.width * 2 + offset,\n                height: sourceNode.height * 2 + offset\n            };\n        } else {\n            startNodeInfo = {\n                x: sourceNode.x - offset / 2,\n                y: sourceNode.y - offset / 2,\n                width: sourceNode.width + offset,\n                height: sourceNode.height + offset\n            };\n        }\n\n        if (targetShapeType === 'circle') {\n            endNodeInfo = {\n                x: (targetNode.x - targetNode.width) - offset / 2,\n                y: (targetNode.y - targetNode.height) - offset / 2,\n                width: targetNode.width * 2 + offset,\n                height: targetNode.height * 2 + offset\n            };\n        } else {\n            endNodeInfo = {\n                x: targetNode.x - offset / 2,\n                y: targetNode.y - offset / 2,\n                width: targetNode.width + offset,\n                height: targetNode.height + offset\n            };\n        }\n\n        let startPoint = this.getPoint(startNodeInfo, {\n            x: endNodeInfo.x + endNodeInfo.width / 2,\n            y: endNodeInfo.y + endNodeInfo.height / 2\n        });\n        let endPoint = this.getPoint(endNodeInfo, startPoint);\n        return [startPoint.x, startPoint.y, endPoint.x, endPoint.y];\n    }\n}"]}